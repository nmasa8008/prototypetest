"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformOas3Operation = exports.transformOas3Operations = void 0;
const lodash_1 = require("lodash");
const oas_1 = require("../oas");
const accessors_1 = require("../oas/accessors");
const tag_1 = require("../oas/tag");
const utils_1 = require("../utils");
const guards_1 = require("./guards");
const callbacks_1 = require("./transformers/callbacks");
const request_1 = require("./transformers/request");
const responses_1 = require("./transformers/responses");
const securities_1 = require("./transformers/securities");
const servers_1 = require("./transformers/servers");
function transformOas3Operations(document) {
    return oas_1.transformOasOperations(document, exports.transformOas3Operation);
}
exports.transformOas3Operations = transformOas3Operations;
exports.transformOas3Operation = ({ document, path, method }) => {
    const pathObj = utils_1.maybeResolveLocalRef(document, lodash_1.get(document, ['paths', path]));
    if (!pathObj) {
        throw new Error(`Could not find ${['paths', path].join('/')} in the provided spec.`);
    }
    const operation = utils_1.maybeResolveLocalRef(document, lodash_1.get(document, ['paths', path, method]));
    if (!operation) {
        throw new Error(`Could not find ${['paths', path, method].join('/')} in the provided spec.`);
    }
    const servers = operation.servers || pathObj.servers || document.servers;
    const httpOperation = {
        id: '?http-operation-id?',
        iid: operation.operationId,
        description: operation.description,
        deprecated: operation.deprecated,
        method,
        path,
        summary: operation.summary,
        responses: responses_1.translateToResponses(document, operation.responses),
        servers: Array.isArray(servers) ? servers_1.translateToServers(servers.filter(guards_1.isServerObject)) : [],
        request: request_1.translateToRequest(accessors_1.getValidOasParameters(document, operation.parameters, pathObj.parameters), operation.requestBody),
        callbacks: operation.callbacks && callbacks_1.translateToCallbacks(operation.callbacks),
        tags: tag_1.translateToTags(accessors_1.getOasTags(operation.tags)),
        security: securities_1.translateToSecurities(document, operation.security),
    };
    return lodash_1.omitBy(httpOperation, lodash_1.isNil);
};
//# sourceMappingURL=operation.js.map