"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateToResponses = void 0;
const lodash_1 = require("lodash");
const utils_1 = require("../../utils");
const guards_1 = require("../guards");
const getExamplesFromSchema_1 = require("./getExamplesFromSchema");
const params_1 = require("./params");
function translateToResponse(document, produces, response, statusCode) {
    const resolvedResponse = utils_1.maybeResolveLocalRef(document, response);
    if (!guards_1.isResponseObject(resolvedResponse))
        return;
    const headers = params_1.translateToHeaderParams(resolvedResponse.headers || {});
    const objectifiedExamples = lodash_1.chain(resolvedResponse.examples || (resolvedResponse.schema ? getExamplesFromSchema_1.getExamplesFromSchema(resolvedResponse.schema) : void 0))
        .mapValues((value, key) => ({ key, value }))
        .values()
        .value();
    const contents = produces.map(produceElement => ({
        mediaType: produceElement,
        schema: resolvedResponse.schema,
        examples: objectifiedExamples.filter(example => example.key === produceElement),
    }));
    const translatedResponses = {
        code: statusCode,
        description: resolvedResponse.description,
        headers,
        contents,
    };
    const foreignExamples = objectifiedExamples.filter(example => !produces.includes(example.key));
    if (foreignExamples.length > 0) {
        if (translatedResponses.contents.length === 0)
            translatedResponses.contents[0] = {
                mediaType: '',
                schema: {},
                examples: [],
            };
        translatedResponses.contents[0].examples.push(...foreignExamples);
    }
    return translatedResponses;
}
function translateToResponses(document, responses, produces) {
    if (!utils_1.isDictionary(responses)) {
        return [];
    }
    return lodash_1.compact(lodash_1.map(responses, lodash_1.partial(translateToResponse, document, produces)));
}
exports.translateToResponses = translateToResponses;
//# sourceMappingURL=responses.js.map